void cc_double_track(rt_int16_t l_speed,rt_int16_t r_speed)
{
		if(Front_Med && Back_Med)           {mot(l_speed,r_speed);}             // test_1       tese_2
    else if(Front_Med && Back_Right)    {mot(l_speed*0.87,r_speed*0.87);}   //0.86 0.98
    else if(Front_Med && Back_Left)     {mot(l_speed*0.93,r_speed*0.83);}   //0.98 0.86

    else if(Front_Left && Back_Right)   {mot(l_speed*0.68,r_speed*0.81);}   //0.78 0.87   0.75 0.85
    else if(Front_Left && Back_Med)     {mot(l_speed*0.76,r_speed*0.88);}   //0.85 0.95
    else if(Front_Left && Back_Left)    {mot(l_speed*0.76,r_speed*0.86);}   //0.82 0.93   0.85 0.93

    else if(Front_Right && Back_Left)   {mot(l_speed*0.80,r_speed*0.73);}   //0.87 0.78   0.85 0.75
    else if(Front_Right && Back_Med)    {mot(l_speed*0.88,r_speed*0.77);}   //0.95 0.85
    else if(Front_Right && Back_Right)  {mot(l_speed*0.8,r_speed*0.75);}   //0.93 0.82   0.93 0.85
    else    {mot(400,400);}
		rt_thread_delay(2);
}
void quxianTrack(rt_int16_t l_speed,rt_int16_t r_speed)
{
	
	
		if(f[2]&&f[3]&&f[4]&&f[5])   {mot(l_speed*0.85,r_speed);}		
	else if(f[2]&&f[3]&&f[4]) {mot(l_speed*0.70,r_speed);}
  else if(f[3]&&f[4]&&f[5]) {mot(l_speed*0.85,r_speed*0.97);}
	       else  if(f[3]&&f[4])             {mot(l_speed*0.85,r_speed); }

	
	else if(f[1]&&f[2]&&f[3]) {mot(l_speed*0.67,r_speed);}
	else if(f[4]&&f[5]&&f[6]) {mot(l_speed,r_speed*0.85);}
	        else  if(f[2]&&f[3])             {mot(l_speed*0.60,r_speed); }
		else  if(f[4]&&f[5])             {mot(l_speed,r_speed*0.86); }
					
	else if(f[0]&&f[1]&&f[2]) {mot(l_speed*0.50,r_speed);}
  else if(f[5]&&f[6]&&f[7]) {mot(l_speed,r_speed*0.78);}
	        else  if(f[1]&&f[2])             {mot(l_speed*0.50,r_speed); }
					else  if(f[5]&&f[6])             {mot(l_speed,r_speed*0.76); }
					else  if(f[0]&&f[1])             {mot(l_speed*0.45,r_speed); }
					else  if(f[6]&&f[7])             {mot(l_speed,r_speed*0.77); }
					      else  if(f[0])             {mot(l_speed*0.30,r_speed); }
						
								else  if(f[7])             {mot(l_speed,r_speed*0.60); }
					
	else  {mot(l_speed*0.30,r_speed*0.95);}
//	 rt_mutex_take(grayscale_mutex,RT_WAITING_FOREVER);

	rt_thread_delay(2);

	
}

void Forward_Track_all(rt_int16_t l_speed,rt_int16_t r_speed)
{
      rt_mutex_take(grayscale_mutex,RT_WAITING_FOREVER);
//    
//    if(Front_Med && Back_Med)           {mot(l_speed,r_speed);}             // test_1       tese_2
//    else if(Front_Med&&!f[4] && Back_Right)    {mot(l_speed*0.86,r_speed*0.98);}   //0.86 0.98
//    else if(Front_Med&&!f[3] && Back_Left)     {mot(l_speed*0.98,r_speed*0.86);}   //0.98 0.86

//    else if(Front_Left && Back_Right)   {mot(l_speed*0.78,r_speed*0.87);}   //0.78 0.87   0.75 0.85
//    else if(Front_Left && Back_Med)     {mot(l_speed*0.85,r_speed*0.95);}   //0.85 0.95
//    else if(Front_Left && Back_Left)    {mot(l_speed*0.82,r_speed*0.93);}   //0.82 0.93   0.85 0.93

//    else if(Front_Right && Back_Left)   {mot(l_speed*0.87,r_speed*0.78);}   //0.87 0.78   0.85 0.75
//    else if(Front_Right && Back_Med)    {mot(l_speed*0.95,r_speed*0.85);}   //0.95 0.85
//    else if(Front_Right && Back_Right)  {mot(l_speed*0.93,r_speed*0.82);}   //0.93 0.82   0.93 0.85

		if(Front_Med && Back_Med)						{mot(l_speed,r_speed);}
		else if(Front_Med && Back_Right)		{mot(l_speed*0.90,r_speed*0.98);}
		else if(Front_Med && Back_Left) 		{mot(l_speed*0.98,r_speed*0.90);}
//		else if(Front_Med && Back_LLeft)		{mot(l_speed*0.85,r_speed*0.70);}
//		else if(Front_Med && Back_RRight)		{mot(l_speed*0.70,r_speed*0.85);}
		
		else if(Front_Left && Back_Right)				{mot(l_speed*0.81,r_speed*0.88);}
		else if(Front_Left && Back_Med)			{mot(l_speed*0.88,r_speed*0.98);}
		else if(Front_Left && Back_Left)			{mot(l_speed*0.82,r_speed*0.93);}
//		else if(Front_Left && Back_RRight)			{mot(l_speed*0.75,r_speed*0.87);}
//		else if(Front_Left && Back_LLeft)			{mot(l_speed*0.80,r_speed*0.87);}
//		
		else if(Front_Right && Back_Left)		{mot(l_speed*0.88,r_speed*0.81);}
		else if(Front_Right && Back_Med)				{mot(l_speed*0.98,r_speed*0.88);}
		else if(Front_Right && Back_Right)			{mot(l_speed*0.93,r_speed*0.82);}
    else    {mot(400,400);}
rt_thread_delay(100);
//    rt_kprintf("\nf:  %d  %d  %d  %d  %d  %d  %d  %d",
//            !f[0],!f[1],!f[3],!f[3],!f[4],!f[5],!f[6],!f[7]);
//    rt_kprintf("\tb:  %d  %d  %d  %d  %d  %d  %d  %d",
//             !b[7],!b[6],!b[5],!b[4],!b[3],!b[2],!b[1],!b[0]);
  rt_mutex_release(grayscale_mutex);
        rt_thread_delay(2);
}

void SingleForwardTrack(rt_int16_t l_speed,rt_int16_t r_speed)
{
	rt_mutex_take(grayscale_mutex,RT_WAITING_FOREVER);
	if ((!f[2])&&f[3]&&f[4]&&(!f[5]))                 {mot(l_speed,       r_speed);}
    else if(f[2]&&f[3]&&f[4]&&f[5])                   {mot(l_speed,       r_speed);}
    //deviation:+-1
    else if(f[2]&&f[3]&&f[4])       mot(l_speed*0.94,  r_speed);
    else if(f[3]&&f[4]&&f[5])       mot(l_speed,       r_speed*0.94);
    //deviation:+-3
    else if(f[1]&&f[2]&&f[3])       mot(l_speed*0.89,  r_speed);
    else if(f[4]&&f[5]&&f[6])       mot(l_speed,       r_speed*0.90);
    //deviation:+-2
    else if(f[2]&&f[3])             mot(l_speed*0.915,  r_speed);
    else if(f[4]&&f[5])             mot(l_speed,       r_speed*0.92);
    //deviation:+-4
    else if(f[1]&&f[2])             mot(l_speed*0.85,   r_speed);
    else if(f[5]&&f[6])             mot(l_speed,       r_speed*0.85);
    //deviation:+-5
    else if (f[1])                  mot(l_speed*0.78,   r_speed);
    else if (f[6])                  mot(l_speed,       r_speed*0.78);
    //deviation:+-6
    else if (f[0]&&f[1])            mot(l_speed*0.7,   r_speed);
    else if (f[6]&&f[7])            mot(l_speed,       r_speed*0.7);
    
    else                            mot(l_speed*0.7,   r_speed*0.7);

	
	rt_mutex_release(grayscale_mutex);
	rt_thread_delay(2);
}
void ForwardTrack(rt_int16_t l_speed,rt_int16_t r_speed)
{
	
	
		if(f[2]&&f[3]&&f[4]&&f[5])   {mot(l_speed*0.98,r_speed);}		
	else if(f[2]&&f[3]&&f[4]) {mot(l_speed*0.905,r_speed);}
  else if(f[3]&&f[4]&&f[5]) {mot(l_speed,r_speed*0.98);}
	       else  if(f[3]&&f[4])             {mot(l_speed*0.97,r_speed); }

	
	else if(f[1]&&f[2]&&f[3]) {mot(l_speed*0.78,r_speed);}
	else if(f[4]&&f[5]&&f[6]) {mot(l_speed,r_speed*0.905);}
	        else  if(f[2]&&f[3])             {mot(l_speed*0.82,r_speed); }
					else  if(f[4]&&f[5])             {mot(l_speed,r_speed*0.92); }
					
	else if(f[0]&&f[1]&&f[2]) {mot(l_speed*0.67,r_speed);}
  else if(f[5]&&f[6]&&f[7]) {mot(l_speed,r_speed*0.78);}
	        else  if(f[1]&&f[2])             {mot(l_speed*0.70,r_speed); }
					else  if(f[5]&&f[6])             {mot(l_speed,r_speed*0.76); }
					else  if(f[0]&&f[1])             {mot(l_speed*0.65,r_speed); }
					else  if(f[6]&&f[7])             {mot(l_speed,r_speed*0.77); }
					      else  if(f[0])             {mot(l_speed*0.40,r_speed); }
						
								else  if(f[7])             {mot(l_speed,r_speed*0.60); }
					
	else  {mot(l_speed*0.80,r_speed*0.88);}
//	 rt_mutex_take(grayscale_mutex,RT_WAITING_FOREVER);

	rt_thread_delay(2);

	
}

void BackTrack(rt_int16_t l_speed,rt_int16_t r_speed)
{
	rt_mutex_take(grayscale_mutex,RT_WAITING_FOREVER);
	l_speed=-l_speed;
	r_speed=-r_speed;
  if(b[2]&&b[3]&&b[4]&&b[5])   {mot(l_speed,r_speed);}
	else if(b[3]&&b[4]&&b[2])		 {mot(l_speed,r_speed*0.95);}
	else if(b[3]&&b[4]&&b[5])		 {mot(l_speed*0.95,r_speed);}
	else if(b[3]&&b[4])          {mot(l_speed,r_speed);}
	else if(b[2]&&b[3])          {mot(l_speed,r_speed*0.7);}
	else if(b[4]&&b[5])          {mot(l_speed*0.7,r_speed);}
	else if(b[3])                {mot(l_speed,r_speed*0.85);}
	else if(b[4])                {mot(l_speed*0.85,r_speed);}
	else if(b[1]&&b[2])          {mot(l_speed,r_speed*0.2);}
	else if(b[5]&&b[6])          {mot(l_speed*0.2,r_speed);}
	else if(b[2])                {mot(l_speed,r_speed*0.5);}
	else if(b[5])                {mot(l_speed*0.5,r_speed);}
	else if(b[0]&&b[1])					 {mot(l_speed,-r_speed*0.3);}
	else if(b[6]&&b[7])					 {mot(-l_speed*0.3,r_speed);}
	else if(b[1])                {mot(l_speed,r_speed*0.1);}
	else if(b[6])                {mot(l_speed*0.1,r_speed);}
	else if(b[0])                {mot(l_speed*0.5,-r_speed*0.5);}
	else if(b[7])                {mot(-l_speed*0.5,r_speed*0.5);}
	else                         {mot(l_speed*0.75,r_speed*0.75);}
	
	rt_mutex_release(grayscale_mutex);
	
	rt_thread_delay(2);

}
